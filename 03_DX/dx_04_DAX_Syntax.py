"""
_____________________________________________________________________________

04 DAX SYNTAX
_____________________________________________________________________________

1. CALCULATE

Syntax:
CALCULATE(<expression>, <filter1>, <filter2>, ...)
•	<expression>: The aggregation or calculation you want to perform.
•	<filter>: One or more conditions to modify the context of the calculation.

Example:
Imagine you have a dataset Sales with columns:
•	Sales Amount
•	Region
You want to calculate total sales only for the region "West."

TotalSalesWest = CALCULATE(SUM(Sales[Sales Amount]), Sales[Region] = "West")


Returns the sum of Sales Amount where Region equals "West."

-----------------------------------------------------------------------------------------------------------------------------

2. SUM

Syntax:

SUM(<column>)
•	<column>: The numeric column you want to sum up.

Example:
Imagine you have a dataset Sales with the following column:
•	Sales Amount
You want to calculate the total sales across all rows.

TotalSales = SUM(Sales[Sales Amount])


-----------------------------------------------------------------------------------------------------------------------------

3. SUMX

Syntax:

SUMX(<table>, <expression>)


Example:
Imagine you have a dataset Sales with columns:
•	Quantity
•	Price
You want to calculate total revenue, where revenue is calculated as Quantity * Price for each row.

TotalRevenue = SUMX(Sales, Sales[Quantity] * Sales[Price])


Result:
•	Returns the total revenue by summing all Quantity * Price values.

-----------------------------------------------------------------------------------------------------------------------------

4. TOPN

Syntax:

TOPN(<n_value>, <table>, <orderBy_expression>, [<order>])

<orderBy_expression>,: make the measure before then put the measure name isntead of directly using the expression, do the same with rank functions.

Example:
Imagine you have a dataset Sales with columns:
•	Product
•	Sales Amount
You want to find the top 3 products with the highest Sales Amount.

Top3Products = TOPN(3, Sales, Sales[Sales Amount], DESC)



Example: 
Combining TOPN with SUMX and CALCULATE
Imagine you have a dataset Sales with columns:
•	Product
•	Region
•	Quantity
•	Price
You want to calculate the total revenue (Quantity * Price) for the top 2 products by revenue in the "West" region.

DAX Formula:

Top2ProductRevenue = 
SUMX(
    TOPN(
        2,
        FILTER(Sales, Sales[Region] = "West"),
        Sales[Quantity] * Sales[Price],
        DESC
    ),
    Sales[Quantity] * Sales[Price]
)


Step-by-Step Explanation:
1.	FILTER(Sales, Sales[Region] = "West"):
o	Filters the Sales table to include only rows where the Region is "West."
2.	TOPN(2, ..., Sales[Quantity] * Sales[Price], DESC):
o	From the filtered data, picks the top 2 rows with the highest revenue (Quantity * Price), sorted in descending order.
3.	SUMX(..., Sales[Quantity] * Sales[Price]):
o	For the top 2 rows, calculates revenue (Quantity * Price) for each row and sums them up.
4.	Result:
o	Returns the total revenue generated by the top 2 products in the "West" region.


-----------------------------------------------------------------------------------------------------------------------------

5. RANKX

Syntax:

RANKX(<table>, <expression>, [<value>], [<order>], [<ties>])

•	<table>: The table over which ranking is done.
•	<expression>: The column or calculation used for ranking.
•	<value> (optional): A value to rank (used for dynamic ranking).
•	<order> (optional): ASC (ascending) or DESC (descending). Default is ASC.
•	<ties> (optional): Skip for normal ranking or Dense for dense ranking. Default is Skip.

Example 1: Normal Rank
Imagine you have a dataset Sales with columns:
•	Product
•	Sales Amount
You want to rank products by Sales Amount in descending order.

NormalRank = RANKX(ALL(Sales[Product]), Sales[Sales Amount], , DESC, Skip)


Explanation:
1.	Table:
o	ALL(Sales[Product]): Ignores filters on Product for consistent ranking.
2.	Expression:
o	Sales[Sales Amount]: Ranks products based on their Sales Amount.
3.	Order:
o	DESC: Ranks higher Sales Amount with a lower rank number (e.g., 1 for the highest).
4.	Ties:
o	Skip: Assigns the same rank to tied values but skips numbers for the next rank.
o	For example: 100, 90, 90 will rank as 1, 2, 2, 4.


DAX Basics: RANKX for Dense Rank
Example 2: Dense Rank
Using the same Sales table, you want dense ranks for products by Sales Amount.

DenseRank = RANKX(ALL(Sales[Product]), Sales[Sales Amount], , DESC, Dense)


Explanation:
1.	Table:
o	ALL(Sales[Product]): Removes any filter context for Product.
2.	Expression:
o	Sales[Sales Amount]: Ranks products based on their Sales Amount.
3.	Order:
o	DESC: Higher Sales Amount gets a better rank (lower number).
4.	Ties:
o	Dense: Assigns the same rank to tied values but does not skip numbers for the next rank.
o	For example: 100, 90, 90 will rank as 1, 2, 2, 3.



Example: RANKX with CALCULATE for Dense Rank
Imagine you have a dataset Sales with columns:
•	Region
•	Product
•	Sales Amount
You want to calculate the dense rank of products based on their total Sales Amount within each Region.


DAX Formula:

DenseRankByRegion = 
RANKX(
    FILTER(
        ALL(Sales[Product], Sales[Region]), 
        Sales[Region] = EARLIER(Sales[Region])
    ),
    CALCULATE(SUM(Sales[Sales Amount])),
    ,
    DESC,
    Dense
)


Step-by-Step Explanation:
1.	ALL(Sales[Product], Sales[Region]):
o	Removes any filters on Product and Region to get a complete list for ranking.
2.	FILTER(..., Sales[Region] = EARLIER(Sales[Region]):
o	Ensures the ranking is calculated separately for each Region by comparing the Region of the current row with the rows in the table.
3.	CALCULATE(SUM(Sales[Sales Amount])):
o	Computes the total Sales Amount for each product within the current Region.
4.	RANKX(..., ..., DESC, Dense):
o	Assigns dense ranks (1, 2, 2, 3) based on the total Sales Amount in descending order.




Key Difference Between Normal and Dense Ranks:
•	Normal Rank (Skip): Skips ranks after ties.
•	Dense Rank: Assigns consecutive ranks even after ties.

-----------------------------------------------------------------------------------------------------------------------------


6. WINDOW


DAX Basics: WINDOW Function
The WINDOW function is used in DAX to perform windowing operations over a table, enabling you to calculate values like running totals, moving averages, or rankings.

Syntax:

WINDOW(<start_position>, <end_position>, <table>, [<sort_order>])

•	<start_position>: The starting position of the window (e.g., -1 for the previous row, 0 for the current row).
•	<end_position>: The ending position of the window (e.g., 1 for the next row, 0 for the current row).
•	<table>: The table or expression over which the windowing is performed.
•	<sort_order> (optional): The sorting order for evaluating the window. Default is ASC.


Example: 
Moving Average Calculation
Imagine you have a dataset Sales with columns:
•	Date
•	Sales Amount
You want to calculate a 3-day moving average for the Sales Amount.


DAX Formula:

MovingAverage = 
AVERAGEX(
    WINDOW(-1, 1, ALL(Sales[Date]), Sales[Date]),
    SUM(Sales[Sales Amount])
)


Explanation:
1.	WINDOW(-1, 1, ALL(Sales[Date]), Sales[Date]):
o	Defines a 3-day window:
	-1: Includes the previous date.
	0: Includes the current date.
	1: Includes the next date.
o	Uses ALL(Sales[Date]) to ensure the calculation is performed across all dates.
2.	AVERAGEX(...):
o	Calculates the average Sales Amount within the defined window.
3.	SUM(Sales[Sales Amount]):
o	Sums the Sales Amount for each row in the window before averaging.

Example Output:
Date	      Sales Amount	Moving Average
2024-12-01	            100	133.33
2024-12-02	            200	166.67
2024-12-03	            300	200.00


-----------------------------------------------------------------------------------------------------------------------------










"""